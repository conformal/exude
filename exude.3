.\"
.\" Copyright (c) 2011 Marco Peereboom <marco@peereboom.us>
.\"
.\" Permission to use, copy, modify, and distribute this software for any
.\" purpose with or without fee is hereby granted, provided that the above
.\" copyright notice and this permission notice appear in all copies.
.\"
.\" THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
.\" WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
.\" MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
.\" ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
.\" WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
.\" ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
.\" OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
.\"
.Dd $Mdocdate: October 7 2011 $
.Dt EXUDE 3
.Os
.Sh NAME
.Nm exude
.Nd memory debugger
.Sh SYNOPSIS
.Fd #include <exude.h>
.Ft int
.Fn e_asprintf "char **ret" "const char *fmt" "..."
.Ft void *
.Fn e_calloc "size_t nmemb" "size_t size"
.Ft void
.Fn e_check_memory "void"
.Ft void
.Fn e_free "void **ptr"
.Ft void *
.Fn e_malloc "size_t size"
.Ft void *
.Fn e_realloc "void *ptr" "size_t size"
.Ft char *
.Fn e_strdup "const char *s"
.Ft int
.Fn e_vasprintf "char **ret" "const char *format" "va_list ap"
.Ft void
.Fn exude_version "int *major" "int *minor" "int *patch"
.Ft void
.Fn exude_enable "void"
.Ft void
.Fn exude_disable "void"
.Sh DESCRIPTION
.Nm
is a memory debugging library that aids in finding memory leaks.
.Pp
.Fn exude_enable
and
.Fn exude_disable
are routines to enable and disable debugging respectively.  Debugging
is disabled by default.
.Pp
.Fn e_asprintf ,
.Fn e_calloc ,
.Fn e_malloc ,
.Fn e_realloc ,
.Fn e_strdup ,
and
.Fn e_vasprintf
are all wrapper functions to the standard system functions and are used
in the same way.
.Pp
.Fn e_free
is a wrapper function around
.Xr free 3 ,
but takes a pointer to a variable instead.  The variable will be set to
NULL to remove references to the freed memory.
.Pp
.Fn e_check_memory
can be called to verify that all
.Nm
tracked memory allocations have been freed.  This function will abort
(coredump) if not all memory has been freed.  If
.Xr clog_init 3
and
.Xr clog_set_flags 3
have been called,
.Fn e_check_memory
will show all of the callers that allocated memory which have not been freed.
.Pp
.Fn exude_version
sets the values of
.Fa major ,
.Fa minor ,
and
.Fa patch
to their respected values.
.Sh EXAMPLES
The following will point
.Fa ptr
to an allocated area of memory containing the NUL-terminated string "foobar",
then free the memory:
.Bd -literal -offset indent
char *ptr;

exude_enable();

ptr = e_strdup("foobar");
e_free(&str);
.Ed
.Pp
The following use of
.Fn e_check_memory
will output memory allocation to stderr and abort due to all memory not
being freed:
.Bd -literal -offset indent
clog_init(1);
clog_set_flags(CLOG_F_ENABLE | CLOG_F_STDERR);

exude_enable();

p = e_malloc(len + 1);
e_check_memory();
.Ed
.Sh SEE ALSO
.Xr asprintf 3
.Xr calloc 3
.Xr clog_init 3
.Xr clog_set_flags 3
.Xr free 3
.Xr malloc 3
.Xr realloc 3
.Xr strdup 3
.Xr vasprintf 3
.Sh HISTORY
.An -nosplit
.Nm
was written by
.An Marco Peereboom Aq marco@peereboom.us
